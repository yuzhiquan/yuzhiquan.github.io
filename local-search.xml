<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Kubernetes 随笔</title>
    <link href="/2020/06/22/k8s-nit-record/"/>
    <url>/2020/06/22/k8s-nit-record/</url>
    
    <content type="html"><![CDATA[<h3 id="何时重建podsandbox"><a href="#何时重建podsandbox" class="headerlink" title="何时重建podsandbox"></a>何时重建podsandbox</h3><p>在主逻辑<a href="https://github.com/kubernetes/kubernetes/blob/99c50dfd3c0a07f2576d9572f5ee313447a325a8/pkg/kubelet/kuberuntime/kuberuntime_manager.go#L644" target="_blank" rel="noopener">SyncPod</a> 里会进行判断<br>调用<a href="https://github.com/kubernetes/kubernetes/blob/99c50dfd3c0a07f2576d9572f5ee313447a325a8/pkg/kubelet/kuberuntime/kuberuntime_manager.go#L474" target="_blank" rel="noopener">computePodActions</a> 里面进而调用<a href="https://github.com/kubernetes/kubernetes/blob/99c50dfd3c0a07f2576d9572f5ee313447a325a8/pkg/kubelet/kuberuntime/kuberuntime_manager.go#L417" target="_blank" rel="noopener">podSandboxChanged</a><br>看函数注释就能看出来何时认为podsandboxchanged，进而重建<br><pre><code class="hljs shell">0.No sandbox for pod 1.Needs to create a new sandbox when readySandboxCount &gt; 1 or the ready sandbox is not the latest one.2.Needs to create a new sandbox when network namespace changed.3.Needs to create a new sandbox when the sandbox does not have an IP address.</code></pre></p><p>但是如果pod没有配置shouldRestartOnFailure，那么返回的<code>changes.CreateSandbox = false</code></p><h3 id="CNI分配失败后会怎样"><a href="#CNI分配失败后会怎样" class="headerlink" title="CNI分配失败后会怎样"></a>CNI分配失败后会怎样</h3><p>cni插件是放在dockershim里，<em>是cri的一部分？</em></p><p>上面判断需要createsandbox后<br>就各种调用，可以看kubelet调用图里，最后发一个cri grpc请求，RunSandBox<br>如果失败，直接返回err，并生成event，记录trace<br>然后syncpod在syncloop里，会继续重试，但不会<strong>干预调度结果</strong>, 会一直在这个node上重试</p><h3 id="pod-status"><a href="#pod-status" class="headerlink" title="pod status"></a>pod status</h3><pre><code class="hljs shell">// PodPending means the pod has been accepted by the system, but one or more of the containers// has not been started. This includes time before being bound to a node, as well as time spent// pulling images onto the host.PodPending PodPhase = "Pending"// PodRunning means the pod has been bound to a node and all of the containers have been started.// At least one container is still running or is in the process of being restarted.PodRunning PodPhase = "Running"// PodSucceeded means that all containers in the pod have voluntarily terminated// with a container exit code of 0, and the system is not going to restart any of these containers.PodSucceeded PodPhase = "Succeeded"// PodFailed means that all containers in the pod have terminated, and at least one container has// terminated in a failure (exited with a non-zero exit code or was stopped by the system).PodFailed PodPhase = "Failed"// PodUnknown means that for some reason the state of the pod could not be obtained, typically due// to an error in communicating with the host of the pod.PodUnknown PodPhase = "Unknown"</code></pre>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes kube-informer 源码分析[WIP]</title>
    <link href="/2020/05/06/k8s-informer/"/>
    <url>/2020/05/06/k8s-informer/</url>
    
    <content type="html"><![CDATA[<h3 id="need-to-know"><a href="#need-to-know" class="headerlink" title="need to know"></a>need to know</h3><ul><li><code>informer</code>作用</li><li><code>informer</code>组成部分</li><li><code>informer</code>工作流程</li></ul><h3 id="graph"><a href="#graph" class="headerlink" title="graph"></a>graph</h3><p><img src="/images/kube-informer.png" srcset="/img/loading.gif" alt="kube-informer"> </p>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020 target</title>
    <link href="/2020/05/06/2020/"/>
    <url>/2020/05/06/2020/</url>
    
    <content type="html"><![CDATA[<h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><ul><li>[x] k8s develop member [finish @ 2020-02-11]</li><li>[ ] service mesh develop member</li><li>[ ] master rust</li><li>[ ] blog every week</li><li>[ ] deep in golang</li><li>[ ] deep in kubernetes</li><li>[ ] <em>leetcode every week 3-4</em></li><li>[ ] 20+ book<ul><li>[ ] 深入浅出rust</li><li>[ ] Kubernetes 网络权威指南：基础、原理与实践</li><li>[ ] go高级编程</li><li>[ ] 流畅的Python</li><li>[ ] go语言并发之道</li><li>[ ] go并发编程实战</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes kube-scheduler 源码分析[WIP]</title>
    <link href="/2020/01/03/k8s-scheduler/"/>
    <url>/2020/01/03/k8s-scheduler/</url>
    
    <content type="html"><![CDATA[<h3 id="need-to-know"><a href="#need-to-know" class="headerlink" title="need to know"></a>need to know</h3><ul><li>scheduler启动过程</li><li>scheduler的调度过程</li><li>scheduler的evict过程</li><li>scheduler-framework的构成</li></ul><h3 id="graph"><a href="#graph" class="headerlink" title="graph"></a>graph</h3><p><img src="/images/kube-schduler.png" srcset="/img/loading.gif" alt="kube-scheduler"> </p>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes kubelet 源码分析[WIP]</title>
    <link href="/2020/01/02/k8s-kubelet/"/>
    <url>/2020/01/02/k8s-kubelet/</url>
    
    <content type="html"><![CDATA[<h3 id="need-to-know"><a href="#need-to-know" class="headerlink" title="need to know"></a>need to know</h3><ul><li>kubelet启动过程及其启动了哪些组件？</li><li>kubelet对于cri或者oci的调用</li><li>kubelet对pod的lifecycle管理，比如生成和删除<ul><li>创建pod</li><li>删除pod</li></ul></li><li>kubelet的syncloop</li><li>cni插件的初始化与调用</li><li>kubelet的心跳机制</li></ul><h3 id="graph"><a href="#graph" class="headerlink" title="graph"></a>graph</h3><p><img src="/images/kubelet.png" srcset="/img/loading.gif" alt="kube-kubelet"> </p>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes kube-apiserver 源码分析</title>
    <link href="/2019/12/30/k8s-api-servere/"/>
    <url>/2019/12/30/k8s-api-servere/</url>
    
    <content type="html"><![CDATA[<h4 id="需要知道"><a href="#需要知道" class="headerlink" title="需要知道"></a>需要知道</h4><p><code>go-restful</code><br><code>cobra</code></p><p><code>kubernetes</code>的库使用<code>cobra</code>，所以一般都是经过<code>Complete</code>、<code>Valiate</code>、<code>Run</code></p><h3 id="need-to-know"><a href="#need-to-know" class="headerlink" title="need to know"></a>need to know</h3><ul><li>apiserver的启动以及启动组件</li><li>apiserver的restful uri注册以及资源对应</li><li>apiserver的存储(etcd3)</li></ul><h3 id="graph"><a href="#graph" class="headerlink" title="graph"></a>graph</h3><p><img src="/images/kube-apiserver.png" srcset="/img/loading.gif" alt="kube-apiserver"> </p>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go内存逃逸</title>
    <link href="/2019/12/20/go-mem/"/>
    <url>/2019/12/20/go-mem/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CRI-OCI Runtime</title>
    <link href="/2019/12/10/cri-oci-runtime/"/>
    <url>/2019/12/10/cri-oci-runtime/</url>
    
    <content type="html"><![CDATA[<p><code>CRI</code>: <code>container runtime interface</code>, 一组<code>grpc-interface</code>，包括<code>RuntimeService</code>(管理Pod和容器的生命周期)和<code>ImageService</code>(管理镜像的生命周期)  </p><p><code>OCI</code>: <code>Open container initative</code>,描述<code>image</code>管理、<code>container</code>管理、<code>run container</code>的标准</p><p>我们平时讨论到的<code>runtime</code>很多时候都是在指<code>OCI</code>runtime<br><pre><code class="hljs undefined">根据是否实现了对`image`的管理、传输、解压等等API来区分`runtime`</code></pre></p><h3 id="Low-Runtime"><a href="#Low-Runtime" class="headerlink" title="Low-Runtime"></a>Low-Runtime</h3><p>通过设置<code>cgroup</code>和<code>namespace</code>来<code>run container</code></p><h4 id="Runc"><a href="#Runc" class="headerlink" title="Runc"></a>Runc</h4><h4 id="lxc"><a href="#lxc" class="headerlink" title="lxc"></a>lxc</h4><h4 id="lmctfy"><a href="#lmctfy" class="headerlink" title="lmctfy"></a>lmctfy</h4><h3 id="High-Runtime"><a href="#High-Runtime" class="headerlink" title="High-Runtime"></a>High-Runtime</h3><h4 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h4><h4 id="containerd"><a href="#containerd" class="headerlink" title="containerd"></a>containerd</h4><h3 id="shim"><a href="#shim" class="headerlink" title="shim"></a>shim</h3><p>包括crishim和runtime-shim，主要目的是为了解耦</p>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>k8s</tag>
      
      <tag>container</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes架构</title>
    <link href="/2019/01/21/kubernetes-summary/"/>
    <url>/2019/01/21/kubernetes-summary/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>k8s</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Goroutine调度</title>
    <link href="/2019/01/21/go-gpm/"/>
    <url>/2019/01/21/go-gpm/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes CNI 插件编写</title>
    <link href="/2019/01/21/k8s-cni/"/>
    <url>/2019/01/21/k8s-cni/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CAS5.x编译、部署(3)-登录页定制</title>
    <link href="/2019/01/21/CAS-compile-plugin3/"/>
    <url>/2019/01/21/CAS-compile-plugin3/</url>
    
    <content type="html"><![CDATA[<h2 id="定制登录页"><a href="#定制登录页" class="headerlink" title="定制登录页"></a>定制登录页</h2><ul><li>静态资源的位置：<br><code>webapps/cas/WEB-INF/classes/static</code>,包括<code>CSS</code>、<code>JS</code>等静态文件</li><li>登录页模板位置：<code>webapps/cas/WEB-INF/classes/templates</code>,以组件的方式加载了很多其他子模板，简单的说就是控制页面的布局，写过<code>vue</code>、<code>react</code>之类的应该了解，比如我们也要修改的登录页文件就是<code>casLoginView.html</code>,把原来右边的各项组件都去掉，只保留登录框<br> 保留: <pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-sm-12 col-md-6 col-md-push-3 "</span>&gt;</span></code></pre></li></ul><p>  去掉:<br>  <pre><code class="hljs html">&lt;div id="notices" class="col-sm-12 col-md-6 col-md-push-6"&gt;    &lt;div th:replace="fragments/insecure"/&gt;     &lt;div th:replace="fragments/defaultauthn"/&gt;     &lt;div th:replace="fragments/cookies"/&gt;     &lt;div th:replace="fragments/serviceui"/&gt;     &lt;div th:replace="fragments/cas-resources-list"      &lt;div th:replace="fragments/loginProviders" /&gt; &lt;/div&gt; &lt;div class="col-sm-12 col-md-6 col-md-pull-6"&gt;</code></pre></p><ul><li>修改具体各个组件的显示，则是在<code>webapps/WEB-INF/classes/templates/fragments</code>下, 可以配合静态资源的修改来自定义登录页</li><li>各项提示语文件则是根据语言不同，在<code>webapps/cas/WEB-INF/classes</code>下的<code>messages_*.properties</code>文件，大陆的话就是<code>messages_zh_CN.properties</code>文件</li></ul><p><strong>有些基本的页面功底就可以进行登录页自定义了</strong></p>]]></content>
    
    
    <categories>
      
      <category>IT CAS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT</tag>
      
      <tag>CAS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu14.04 docker安装与升级</title>
    <link href="/2019/01/21/docker-update/"/>
    <url>/2019/01/21/docker-update/</url>
    
    <content type="html"><![CDATA[<p>近期用<code>go</code>开发发布平台整合<code>k8s</code>，在<code>mac</code>上编译好的<code>linux binary</code>放在<code>测试机</code>上却报<br><pre><code class="hljs shell">k8s Error response from daemon: client is newer than server (client API version: 1.32, server API version: 1.21</code></pre></p><p>看起来是版本太低，需要进行升级，之前是通过<code>docker-engine</code>安装的<br>大概步骤是：</p><ol><li>安装依赖：</li></ol><pre><code class="hljs undefined"><span class="hljs-title">apt</span>-get install apt-trans<span class="hljs-keyword">port</span>-https ca-certificates</code></pre><ol start="2"><li>加装<code>docker repo</code>   </li></ol><pre><code class="hljs shell">echo "deb https://apt.dockerproject.org/repo ubuntu-trusty main" | sudo tee /etc/apt/sources.list.d/docker.list</code></pre><ol start="3"><li>加<code>key</code> </li></ol><pre><code class="hljs shell">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9</code></pre><ol start="4"><li>更新</li></ol><pre><code class="hljs shell">apt-get update</code></pre><ol start="5"><li>安装<br>发现<code>ubuntu</code>下有几种安装方法</li></ol><pre><code class="hljs shell">apt-get install -y docker-engineapt-get install -y lxc-dockerapt-get install -y docker.io</code></pre><p>但是坑爹的是一个比一个版本老<br>要想更新至最新版本需要</p><pre><code class="hljs shell">wget -qO- https://get.docker.com/ | sh</code></pre><p>这个安装的是最新的<br><pre><code class="hljs shell">Client: Version:      17.09.0-ce API version:  1.32 Go version:   go1.8.3 Git commit:   afdb6d4 Built:        Tue Sep 26 22:42:38 2017 OS/Arch:      linux/amd64Server: Version:      17.09.0-ce API version:  1.32 (minimum version 1.12) Go version:   go1.8.3 Git commit:   afdb6d4 Built:        Tue Sep 26 22:41:20 2017 OS/Arch:      linux/amd64 Experimental: false</code></pre></p><p>在这种情况下可以<br><pre><code class="hljs shell">export DOCKER_API_VERSION=1.23</code></pre></p><p>指定使用的版本<br><code>ubuntu</code>的<code>repo</code>真的有人维护吗？</p>]]></content>
    
    
    <categories>
      
      <category>docker go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CAS5.x编译、部署(2)-SAML2.0认证协议支持</title>
    <link href="/2019/01/21/CAS-compile-plugin2/"/>
    <url>/2019/01/21/CAS-compile-plugin2/</url>
    
    <content type="html"><![CDATA[<h2 id="升级5-1-0"><a href="#升级5-1-0" class="headerlink" title="升级5.1.0"></a>升级5.1.0</h2><p><code>CAS</code>与<code>SAP</code>进行<code>SAML2.0</code>协议认证时有<a href="https://github.com/apereo/cas/issues/2496" target="_blank" rel="noopener">#2496</a>问题，在<code>V5.1.0-RC3</code>修复，所以在<code>5.1.0</code>正式<code>release</code>后进行升级.<br>修改<code>gradle.properties</code><br><pre><code class="hljs bash">cas.version=5.1.0</code></pre></p><p>同时修改<code>cas/build.gradle</code><br><pre><code class="hljs bash">apply from: <span class="hljs-string">'https://raw.githubusercontent.com/apereo/cas/5.1.x/gradle/overrides.gradle'</span><span class="hljs-comment">#由5.0.x改为5.1.x</span></code></pre></p><p>重新编译替换即可</p><h2 id="SAML2-0认证支持"><a href="#SAML2-0认证支持" class="headerlink" title="SAML2.0认证支持"></a>SAML2.0认证支持</h2><p>保证编译war包时添加了<br><pre><code class="hljs bash">compile <span class="hljs-string">"org.apereo.cas:cas-server-support-saml-idp:<span class="hljs-variable">$&#123;project.'cas.version'&#125;</span>"</span></code></pre></p><p>要把证书引入到java环境中：<br><pre><code class="hljs bash">keytool -import -<span class="hljs-built_in">alias</span> cas-main  -keystore <span class="hljs-variable">$JAVA_HOME</span>/jre/lib/security/cacerts -file /tmp/host.cer</code></pre></p><p>引入了证书到linux的认证目录下（不确定是否有用处）<br><pre><code class="hljs bash">cp 证书 /usr/<span class="hljs-built_in">local</span>/share/ca-certificates/ &amp;&amp; update-ca-certificates</code></pre></p><p>注意：<br>1.通配符域名如*.com，会报DNS 找不到host<br>2.不引入证书到cas-server的java环境的话，会报<br><pre><code class="hljs bash">Caused by: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target</code></pre></p><h3 id="配置SAML2-SPmetadata"><a href="#配置SAML2-SPmetadata" class="headerlink" title="配置SAML2 SPmetadata"></a>配置SAML2 SPmetadata</h3><p>配置中添加了<br><pre><code class="hljs bash">cas.authn.samlIdp.metadata.location=/etc/cas/saml <span class="hljs-comment">#5.1.0后需要加file:,否则报错识别不了</span>cas.authn.samlIdp.metadata.location=file:/etc/cas/saml</code></pre></p><p>所以把<code>SPMetadata</code>放到<code>/etc/cas/saml</code>下<br>然后以<code>services</code>的形式配置SP信息，<code>path</code>为<code>tomcat/webapps/cas/WEB-INF/classes/services</code>,格式为<code>json</code>文件<br>配置文件内容为：<br><pre><code class="hljs bash">&#123;  <span class="hljs-string">"@class"</span> : <span class="hljs-string">"org.apereo.cas.support.saml.services.SamlRegisteredService"</span>,  <span class="hljs-string">"serviceId"</span> : <span class="hljs-string">"***********"</span>, <span class="hljs-comment">#为metadata里的entityId</span>  <span class="hljs-string">"name"</span> : <span class="hljs-string">"SAMLService"</span>, <span class="hljs-comment">#唯一的名字</span>  <span class="hljs-string">"id"</span> : 10000003, <span class="hljs-comment">#唯一且递增的id</span>  <span class="hljs-string">"evaluationOrder"</span> : 10,  <span class="hljs-string">"metadataLocation"</span> : <span class="hljs-string">"/etc/cas/saml2/ServiceProviderSAML2Metadata_New.xml"</span> <span class="hljs-comment">#指定metadata的path</span>&#125;</code></pre></p><p>多个SP的话就配置多个services<br>update:<br>cas 5.1.0正式版release后，从json文件load service需要在配置中添加：<br><pre><code class="hljs bash">cas.serviceRegistry.initFromJson=<span class="hljs-literal">true</span></code></pre></p>]]></content>
    
    
    <categories>
      
      <category>IT CAS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT</tag>
      
      <tag>CAS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AliYun阿里云API签名机制（Python）</title>
    <link href="/2019/01/21/aliyun-api-Signature-base-on-python/"/>
    <url>/2019/01/21/aliyun-api-Signature-base-on-python/</url>
    
    <content type="html"><![CDATA[<p>最近在写阿里云相关<code>API</code>,看<a href="https://help.aliyun.com/document_detail/27572.html?spm=5176.doc27577.6.112.jzBpJ7" target="_blank" rel="noopener">官方文档</a>，其中比较重要的就是签名机制，为了在<code>SLB</code>和<code>ECS</code>中使用,封装了相关类备用</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment">#coding: utf-8</span><span class="hljs-comment">#python v2.7.6</span><span class="hljs-keyword">import</span> sys, os<span class="hljs-keyword">import</span> urllib, urllib2<span class="hljs-keyword">import</span> base64<span class="hljs-keyword">import</span> hmac<span class="hljs-keyword">import</span> hashlib<span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> uuid<span class="hljs-keyword">import</span> json<span class="hljs-keyword">import</span> ConfigParsercf = ConfigParser.ConfigParser()cf.read(<span class="hljs-string">'conf.ini'</span>)access_key_id = cf.get(<span class="hljs-string">"aliyun"</span>, <span class="hljs-string">"access_key_id"</span>)access_key_secret = cf.get(<span class="hljs-string">"aliyun"</span>, <span class="hljs-string">"access_key_secret"</span>)slb_address = cf.get(<span class="hljs-string">"aliyun"</span>, <span class="hljs-string">"slb_address"</span>)ecs_address = cf.get(<span class="hljs-string">"aliyun"</span>, <span class="hljs-string">"ecs_address"</span>)slb_api_version = cf.get(<span class="hljs-string">"aliyun"</span>, <span class="hljs-string">"slb_api_version"</span>)ecs_api_version = cf.get(<span class="hljs-string">"aliyun"</span>, <span class="hljs-string">"ecs_api_version"</span>)<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ALIYUN</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, user_params, Host, Version=slb_api_version)</span>:</span>        self.user_params = user_params        <span class="hljs-comment">#self.user_params= &#123;'Action': self.Action, 'LoadBalancerId': self.LoadBalancerId,'BackendServers':self.BackendServers&#125;</span>        self.server_address = Host        self.version = Version<span class="hljs-meta">    @staticmethod</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">percent_encode</span><span class="hljs-params">(str)</span>:</span>        res = urllib.quote(str.decode(sys.stdin.encoding).encode(<span class="hljs-string">'utf8'</span>), <span class="hljs-string">''</span>)        res = res.replace(<span class="hljs-string">'+'</span>, <span class="hljs-string">'%20'</span>)        res = res.replace(<span class="hljs-string">'\''</span>, <span class="hljs-string">'%27'</span>)        res = res.replace(<span class="hljs-string">'\"'</span>, <span class="hljs-string">'%22'</span>)        res = res.replace(<span class="hljs-string">'*'</span>, <span class="hljs-string">'%2A'</span>)        res = res.replace(<span class="hljs-string">'%7E'</span>, <span class="hljs-string">'~'</span>)        <span class="hljs-keyword">return</span> res<span class="hljs-meta">    @staticmethod</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">compute_signature</span><span class="hljs-params">(parameters, access_key_secret)</span>:</span>        sortedParameters = sorted(parameters.items(),                                  key=<span class="hljs-keyword">lambda</span> parameters: parameters[<span class="hljs-number">0</span>])        canonicalizedQueryString = <span class="hljs-string">''</span>        <span class="hljs-keyword">for</span> (k, v) <span class="hljs-keyword">in</span> sortedParameters:            canonicalizedQueryString += <span class="hljs-string">'&amp;'</span> + ALIYUN.percent_encode(                k) + <span class="hljs-string">'='</span> + ALIYUN.percent_encode(str(v))        stringToSign = <span class="hljs-string">'GET&amp;%2F&amp;'</span> + ALIYUN.percent_encode(            canonicalizedQueryString[<span class="hljs-number">1</span>:])        h = hmac.new(access_key_secret + <span class="hljs-string">"&amp;"</span>, stringToSign, sha1)        signature = base64.encodestring(h.digest()).strip()        <span class="hljs-keyword">return</span> signature<span class="hljs-meta">    @staticmethod</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">compose_url</span><span class="hljs-params">(server_address, user_params, version)</span>:</span>        timestamp = time.strftime(<span class="hljs-string">"%Y-%m-%dT%H:%M:%SZ"</span>, time.gmtime())        parameters = &#123; \                <span class="hljs-string">'Format'</span>        : <span class="hljs-string">'JSON'</span>, \                <span class="hljs-string">'Version'</span>       : version, \                <span class="hljs-string">'AccessKeyId'</span>   : access_key_id, \                <span class="hljs-string">'SignatureVersion'</span>  : <span class="hljs-string">'1.0'</span>, \                <span class="hljs-string">'SignatureMethod'</span>   : <span class="hljs-string">'HMAC-SHA1'</span>, \                <span class="hljs-string">'SignatureNonce'</span>    : str(uuid.uuid1()), \                <span class="hljs-string">'TimeStamp'</span>         : timestamp, \        &#125;        <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> user_params.keys():            parameters[key] = user_params[key]        signature = ALIYUN.compute_signature(parameters, access_key_secret)        parameters[<span class="hljs-string">'Signature'</span>] = signature        url = server_address + <span class="hljs-string">"/?"</span> + urllib.urlencode(parameters)        <span class="hljs-keyword">print</span> url        <span class="hljs-keyword">return</span> url    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_request</span><span class="hljs-params">(self, quiet=False)</span>:</span>        url = ALIYUN.compose_url(self.server_address, self.user_params,                                 self.version)        request = urllib2.Request(url)        <span class="hljs-keyword">try</span>:            conn = urllib2.urlopen(request)            response = conn.read()        <span class="hljs-keyword">except</span> urllib2.HTTPError, e:            print(e.read().strip())            <span class="hljs-keyword">raise</span> SystemExit(e)        <span class="hljs-keyword">try</span>:            obj = json.loads(response)            <span class="hljs-keyword">if</span> quiet:                <span class="hljs-keyword">return</span> obj        <span class="hljs-keyword">except</span> ValueError, e:            <span class="hljs-keyword">raise</span> SystemExit(e)        json.dump(obj, sys.stdout, sort_keys=<span class="hljs-literal">True</span>, indent=<span class="hljs-number">2</span>)        sys.stdout.write(<span class="hljs-string">'\n'</span>)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:    testAdd=ALIYUN( \            &#123;<span class="hljs-string">'Action'</span>:<span class="hljs-string">'AddBackendServers'</span>,\            <span class="hljs-string">'LoadBalancerId'</span>:<span class="hljs-string">'139a00604ad-cn-east-hangzhou-01'</span>,\            <span class="hljs-string">'BackendServers'</span>:[&#123;<span class="hljs-string">"ServerId"</span>:<span class="hljs-string">"vm-233"</span>,<span class="hljs-string">"Weight"</span>:<span class="hljs-string">"0"</span>&#125;,&#123;<span class="hljs-string">"ServerId"</span>:<span class="hljs-string">"vm-234"</span>,<span class="hljs-string">"Weight"</span>:<span class="hljs-string">"0"</span>&#125;]\            &#125;,slb_address            )    testRemove=ALIYUN( \            &#123;            <span class="hljs-string">'Action'</span>:<span class="hljs-string">'RemoveBackendServers'</span>,\            <span class="hljs-string">'LoadBalancerId'</span>:<span class="hljs-string">'139a00604ad-cn-east-hangzhou-01'</span>,\            <span class="hljs-string">'BackendServers'</span>:[<span class="hljs-string">" vm-233"</span>,<span class="hljs-string">" vm-234"</span>]\            &#125;,slb_address            )    testSet=ALIYUN( \            &#123;            <span class="hljs-string">'Action'</span>:<span class="hljs-string">'SetBackendServers'</span>,\            <span class="hljs-string">'LoadBalancerId'</span>:<span class="hljs-string">'139a00604ad-cn-east-hangzhou-01'</span>,\            <span class="hljs-string">'BackendServers'</span>:[&#123;<span class="hljs-string">"ServerId"</span>:<span class="hljs-string">"vm-233"</span>,<span class="hljs-string">"Weight"</span>:<span class="hljs-string">"0"</span>&#125;,&#123;<span class="hljs-string">"ServerId"</span>:<span class="hljs-string">"vm-234"</span>,<span class="hljs-string">"Weight"</span>:<span class="hljs-string">"0"</span>&#125;]\            &#125;,slb_address            )    testEcs=ALIYUN( \            &#123;            <span class="hljs-string">'Action'</span>:<span class="hljs-string">'DescribeInstances'</span>,\            <span class="hljs-string">'RegionId'</span>:<span class="hljs-string">'cn-hangzhou'</span>,\            &#125;,ecs_address,            Version=ecs_api_version            )    testSLBd = ALIYUN(&#123;<span class="hljs-string">'Action'</span>: <span class="hljs-string">'DescribeRegions'</span>&#125;, slb_address)    testSLBd1 = ALIYUN(        &#123;<span class="hljs-string">'Action'</span>: <span class="hljs-string">'DescribeLoadBalancers'</span>,         <span class="hljs-string">'RegionId'</span>: <span class="hljs-string">'cn-hangzhou'</span>&#125;, slb_address)    testSLBd2 = ALIYUN(        &#123;<span class="hljs-string">'Action'</span>: <span class="hljs-string">'DescribeLoadBalancers'</span>,         <span class="hljs-string">'RegionId'</span>: <span class="hljs-string">'cn-beijing'</span>&#125;, slb_address)    testSLBd.make_request()    testSLBd1.make_request()    <span class="hljs-keyword">print</span> testSLBd2.make_request(quiet=<span class="hljs-literal">True</span>)</code></pre>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>aliyun</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flask日志记录</title>
    <link href="/2019/01/21/Flask%E8%AE%B0%E5%BD%95log/"/>
    <url>/2019/01/21/Flask%E8%AE%B0%E5%BD%95log/</url>
    
    <content type="html"><![CDATA[<h2 id="python日志模块"><a href="#python日志模块" class="headerlink" title="python日志模块"></a>python日志模块</h2><p>python的日志记录一般使用<code>logging</code>标准模块，比较强大，可以设置日志等级<code>level</code>，添加日志<code>handler</code>来扩展记录模式，比如<code>streamhandler</code>、<code>filehandler</code>、<code>smtphandler</code>等等，基本不给第三方日志模块留活路。<br>比如打印到<code>stdout</code>的日志可以这么写：<br><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">init_log</span><span class="hljs-params">()</span>:</span>    log = logging.getLogger(__name__)    log.setLevel(LOG_LEVEL)    console = logging.StreamHandler(sys.stdout)    console.setLevel(LOG_LEVEL)    fmt = <span class="hljs-string">"[%(levelname)s][%(asctime)s][%(process)d]"</span> \        <span class="hljs-string">"logger=%(name)s|tag=%(funcName)s:%(filename)s:%(lineno)d|"</span> \        <span class="hljs-string">"content=%(message)s"</span>    datefmt = <span class="hljs-string">"%Y-%m-%d %H:%M:%S %z"</span>    formatter = logging.Formatter(fmt=fmt, datefmt=datefmt)    console.setFormatter(formatter)    log.addHandler(console)    <span class="hljs-keyword">return</span> log</code></pre></p><p>然后就可以<br><pre><code class="hljs python">log.debug(<span class="hljs-string">'Message'</span>)<span class="hljs-comment">#log</span>[DEBUG][<span class="hljs-number">2016</span><span class="hljs-number">-11</span><span class="hljs-number">-25</span> <span class="hljs-number">16</span>:<span class="hljs-number">23</span>:<span class="hljs-number">23</span> +<span class="hljs-number">0000</span>][<span class="hljs-number">22486</span>]logger=app.common.init_log|tag=verify******:**********:<span class="hljs-number">24</span>|content=Message</code></pre></p><p>也可以使用<code>logging</code>的配置文件,如<code>logging.conf</code><br><pre><code class="hljs python">logging.config.fileConfig(<span class="hljs-string">"logging.conf"</span>)  logger = logging.getLogger(<span class="hljs-string">'test'</span>)</code></pre></p><p>目前更多使用字典做配置项的<br>嗯，陪老婆去逛街，回来继续<br>比如：<br><pre><code class="hljs python">logger_dict_config = &#123;        <span class="hljs-string">'version'</span>: <span class="hljs-number">1</span>,        <span class="hljs-string">'disable_existing_loggers'</span>: <span class="hljs-literal">True</span>,        <span class="hljs-string">'formatters'</span>: &#123;            <span class="hljs-string">'console'</span>: &#123;                <span class="hljs-string">'format'</span>: <span class="hljs-string">'[%(asctime)s][%(levelname)s] %(name)s '</span>                          <span class="hljs-string">'%(filename)s:%(funcName)s:%(lineno)d | %(message)s'</span>,                <span class="hljs-string">'datefmt'</span>: <span class="hljs-string">'%H:%M:%S'</span>,            &#125;,        &#125;,        <span class="hljs-string">'handlers'</span>: &#123;            <span class="hljs-string">'console'</span>: &#123;                <span class="hljs-string">'level'</span>: <span class="hljs-string">'DEBUG'</span>,                <span class="hljs-string">'class'</span>: <span class="hljs-string">'logging.StreamHandler'</span>,                <span class="hljs-string">'formatter'</span>: <span class="hljs-string">'console'</span>,                <span class="hljs-string">'stream'</span>: <span class="hljs-string">'ext://sys.stdout'</span>            &#125;,            <span class="hljs-string">'error'</span>: &#123;                <span class="hljs-string">'level'</span>: <span class="hljs-string">'ERROR'</span>,                <span class="hljs-string">'class'</span>: <span class="hljs-string">'logging.StreamHandler'</span>,                <span class="hljs-string">'formatter'</span>: <span class="hljs-string">'console'</span>,                <span class="hljs-string">'stream'</span>: <span class="hljs-string">'ext://sys.stderr'</span>            &#125;        &#125;,        <span class="hljs-string">'loggers'</span>: &#123;            <span class="hljs-string">'app'</span>: &#123;                <span class="hljs-string">'handlers'</span>: [<span class="hljs-string">'console'</span>],                <span class="hljs-string">'level'</span>: <span class="hljs-string">'DEBUG'</span>,                <span class="hljs-string">'propagate'</span>: <span class="hljs-literal">False</span>,            &#125;                    &#125;    &#125;    logging.config.dictConfig(get_logging_config(app.config))_logger = logging.getLogger(<span class="hljs-string">'app'</span>)</code></pre></p><h2 id="Flask日志"><a href="#Flask日志" class="headerlink" title="Flask日志"></a>Flask日志</h2><p>启动flask后，除了上述主动打印的服务日志或调试日志外，还会有：<br><pre><code class="hljs bash">127.0.0.1 - - [27/Nov/2016 14:15:13] <span class="hljs-string">"GET /login HTTP/1.1"</span> 200 -</code></pre></p><p>这个是由<code>werkzeug</code>模块控制的，在一定情况下需要定制或者重定向标准日志的时候可以<br><pre><code class="hljs python">logger = logging.getLogger(<span class="hljs-string">'werkzeug'</span>)<span class="hljs-comment">#仅ERROR级日志打印</span>logger.setLevel(logging.ERROR)<span class="hljs-comment">#关掉日志，仅仅打印服务日志</span>logger.disabled = <span class="hljs-literal">True</span><span class="hljs-comment">#修改日志格式,和werkzeug日志在一块，上面关闭的话，也不会显示</span><span class="hljs-keyword">from</span> werkzeug._internal <span class="hljs-keyword">import</span> _log<span class="hljs-comment">#_log('level','content')</span>_log(<span class="hljs-string">'info'</span>,<span class="hljs-string">'[Dirac]&#123;real_ip&#125; &#123;remote_ip&#125; &#123;request_host&#125; [&#123;request_time&#125;] "&#123;request_method&#125; &#123;request_path&#125;" &#123;reqeust_staus_code&#125; &#123;response_time&#125; &#123;uuid&#125;'</span>.format(...)</code></pre></p><p>上面的方法可以关掉<code>werkzeug</code>日志，只打印自己定义的服务日志，这样可以统一日志格式进行分析，但如果希望替换掉<code>werkzug</code>日志，则可以修改或者替换掉默认的请求<code>handler</code>的日志格式，例如<br><pre><code class="hljs python"><span class="hljs-keyword">from</span> werkzeug <span class="hljs-keyword">import</span> serving<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LimitLogHandler</span><span class="hljs-params">(serving.WSGIRequestHandler)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">log</span><span class="hljs-params">(self, type, message, *args)</span>:</span>        msg = (message % args)        _log(type, <span class="hljs-string">'%s - - (Lim) [%s] %s\n'</span> % (self.address_string(),                                     self.log_date_time_string(),                                     <span class="hljs-string">"&#123;&#125; ... &#123;&#125;"</span>.format(msg[:<span class="hljs-number">50</span>],msg[<span class="hljs-number">-40</span>:])))app = flask.Flask(__name__)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:    app.run(debug = <span class="hljs-literal">True</span>, request_handler = LimitLogHandler)</code></pre></p><p><strong>werkzeug</strong>真是个好东西，需要用好并好好读下源码<br>啥时候才能写出优雅高效的<strong>python</strong>代码啊？</p><h2 id="过滤addFilter"><a href="#过滤addFilter" class="headerlink" title="过滤addFilter"></a>过滤addFilter</h2><p>增加过滤器，滤除不需要的<code>log</code>,上面修改<code>werkzeug</code>日志也可以滤出默认日志<br><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NoParsingFilter</span><span class="hljs-params">(logging.Filter)</span>:</span><span class="hljs-comment">#重写filter函数</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">filter</span><span class="hljs-params">(self, record)</span>:</span>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> record.getMessage().startswith(<span class="hljs-string">'[Dirac]'</span>)logger.addFilter(NoParsingFilter())</code></pre></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>Flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python的属性设置</title>
    <link href="/2019/01/21/python_setattr/"/>
    <url>/2019/01/21/python_setattr/</url>
    
    <content type="html"><![CDATA[<blockquote><p>python中的属性管理由<code>__dict__</code>存储</p></blockquote><h3 id="getattr-与-getattribute"><a href="#getattr-与-getattribute" class="headerlink" title="__getattr__与__getattribute__"></a><code>__getattr__</code>与<code>__getattribute__</code></h3><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ul><li><code>__getattr__</code>在访问不存在的成员时才会触发，可以用来做部分异常处理</li><li><code>__getattribute__</code>则拦截所有对属性的访问（包括对<code>__dict__</code>的访问），如果<code>class</code>同时定义了<code>__getattr__</code>和<code>__getattribute__</code>，<code>__getattr__</code>不会生效<pre><code class="hljs python">In [<span class="hljs-number">29</span>]: <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span><span class="hljs-params">(object)</span>:</span>    ...:     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,name)</span>:</span>    ...:         self.name=name    ...:     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getattr__</span><span class="hljs-params">(self,*args,**kwargs)</span>:</span>    ...:         <span class="hljs-keyword">if</span> <span class="hljs-string">'age'</span> <span class="hljs-keyword">in</span> args:    ...:             <span class="hljs-keyword">return</span> <span class="hljs-number">20</span>    ...:     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__setattr__</span><span class="hljs-params">(self,*args,**kwargs)</span>:</span>    ...:         <span class="hljs-keyword">return</span> object.__setattr__(self,*args,**kwargs)    ...:    ...:In [<span class="hljs-number">30</span>]: t=Test(<span class="hljs-string">'haha'</span>)In [<span class="hljs-number">31</span>]: t.__dict__Out[<span class="hljs-number">31</span>]: &#123;<span class="hljs-string">'name'</span>: <span class="hljs-string">'haha'</span>&#125;In [<span class="hljs-number">32</span>]: t.ageOut[<span class="hljs-number">32</span>]: <span class="hljs-number">20</span>In [<span class="hljs-number">33</span>]: t.age=<span class="hljs-number">100</span>In [<span class="hljs-number">34</span>]: t.ageO ut[<span class="hljs-number">34</span>]: <span class="hljs-number">100</span>In [<span class="hljs-number">35</span>]: t.__dict__Out[<span class="hljs-number">35</span>]: &#123;<span class="hljs-string">'age'</span>: <span class="hljs-number">100</span>, <span class="hljs-string">'name'</span>: <span class="hljs-string">'haha'</span>&#125;</code></pre></li></ul><p><code>__getattribute__</code>只有新式类才生效，继承自<code>object</code>的类</p><h2 id="setattr"><a href="#setattr" class="headerlink" title="__setattr__"></a><code>__setattr__</code></h2><p>每当属性被赋值的时候， <code>__setattr__()</code> 会被调用，所以有可能造成递归调用，比如：<br><pre><code class="hljs python"><span class="hljs-comment">#wrong</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__setattr__</span><span class="hljs-params">(self, name, value)</span>:</span>    self.name = value<span class="hljs-comment">#right</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__setattr__</span><span class="hljs-params">(self, name, value)</span>:</span>    self.__dict__[name] = value</code></pre></p><p>一般来说都是在获取某个属性的时候做特殊处理或限制，设置属性时很少会涉及。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云部署高可用K8S集群</title>
    <link href="/2019/01/21/k8s_install_in_aliyun_vpc/"/>
    <url>/2019/01/21/k8s_install_in_aliyun_vpc/</url>
    
    <content type="html"><![CDATA[<h1 id="阿里云部署高可用K8S集群"><a href="#阿里云部署高可用K8S集群" class="headerlink" title="阿里云部署高可用K8S集群"></a>阿里云部署高可用K8S集群</h1><h2 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h2><ul><li>阿里云<code>ECS</code>，<code>Ubuntu 16.04.3 LTS</code>,共6台，其中三台<code>master</code>,三台<code>node</code></li><li>阿里云<code>VPC</code>网络环境</li><li><p><code>k8s</code>版本</p><pre><code class="hljs bash">kubectl  versionClient Version: version.Info&#123;Major:<span class="hljs-string">"1"</span>, Minor:<span class="hljs-string">"8"</span>, GitVersion:<span class="hljs-string">"v1.8.4"</span>, GitCommit:<span class="hljs-string">"9befc2b8928a9426501d3bf62f72849d5cbcd5a3"</span>, GitTreeState:<span class="hljs-string">"clean"</span>, BuildDate:<span class="hljs-string">"2017-11-20T05:28:34Z"</span>, GoVersion:<span class="hljs-string">"go1.8.3"</span>, Compiler:<span class="hljs-string">"gc"</span>, Platform:<span class="hljs-string">"linux/amd64"</span>&#125;Server Version: version.Info&#123;Major:<span class="hljs-string">"1"</span>, Minor:<span class="hljs-string">"8"</span>, GitVersion:<span class="hljs-string">"v1.8.4"</span>, GitCommit:<span class="hljs-string">"9befc2b8928a9426501d3bf62f72849d5cbcd5a3"</span>, GitTreeState:<span class="hljs-string">"clean"</span>, BuildDate:<span class="hljs-string">"2017-11-20T05:17:43Z"</span>, GoVersion:<span class="hljs-string">"go1.8.3"</span>, Compiler:<span class="hljs-string">"gc"</span>, Platform:<span class="hljs-string">"linux/amd64"</span>&#125;</code></pre></li></ul><h2 id="部署主集群"><a href="#部署主集群" class="headerlink" title="部署主集群"></a>部署主集群</h2><ul><li>部署参考<a href="https://github.com/gjmzj/kubeasz" target="_blank" rel="noopener">https://github.com/gjmzj/kubeasz</a></li><li>部署所使用配置</li></ul><pre><code class="hljs bash"><span class="hljs-comment"># 部署节点：运行这份 ansible 脚本的节点</span>[deploy]10.102.54.42<span class="hljs-comment"># etcd集群请提供如下NODE_NAME、NODE_IP变量</span><span class="hljs-comment"># 请注意etcd集群必须是1,3,5,7...奇数个节点</span>[etcd]10.102.54.42 NODE_NAME=etcd1 NODE_IP=<span class="hljs-string">"10.102.54.42"</span>10.102.54.43 NODE_NAME=etcd2 NODE_IP=<span class="hljs-string">"10.102.54.43"</span>10.102.54.44 NODE_NAME=etcd3 NODE_IP=<span class="hljs-string">"10.102.54.44"</span>[kube-master]10.102.54.42 NODE_IP=<span class="hljs-string">"10.102.54.42"</span>10.102.54.43 NODE_IP=<span class="hljs-string">"10.102.54.43"</span>10.102.54.44 NODE_IP=<span class="hljs-string">"10.102.54.44"</span><span class="hljs-comment"># 负载均衡至少两个节点，安装 haproxy+keepalived</span><span class="hljs-comment"># 根据master节点数量同步修改roles/lb/templates/haproxy.cfg.j2</span>[lb]10.102.54.43 LB_IF=<span class="hljs-string">"eth0"</span> LB_ROLE=backup10.102.54.42 LB_IF=<span class="hljs-string">"eth0"</span> LB_ROLE=master[lb:vars]LB_EP1=<span class="hljs-string">"10.102.54.42:6443"</span><span class="hljs-comment"># api-server 实际成员地址端口</span>LB_EP2=<span class="hljs-string">"10.102.54.43:6443"</span><span class="hljs-comment"># api-server 实际成员地址端口</span>LB_EP3=<span class="hljs-string">"10.102.54.44:6443"</span><span class="hljs-comment"># api-server 实际成员地址端口</span>MASTER_IP=<span class="hljs-string">"10.102.54.222"</span>  <span class="hljs-comment"># api-server 虚地址</span>MASTER_PORT=<span class="hljs-string">"8443"</span><span class="hljs-comment"># api-server 服务端口</span><span class="hljs-comment">#确保node节点有变量NODE_ID=node1</span>[kube-node]10.102.54.45 NODE_ID=node1 NODE_IP=<span class="hljs-string">"10.102.54.45"</span>10.102.54.46 NODE_ID=node2 NODE_IP=<span class="hljs-string">"10.102.54.46"</span>10.102.54.47 NODE_ID=node3 NODE_IP=<span class="hljs-string">"10.102.54.47"</span>[kube-cluster:children]kube-nodekube-master<span class="hljs-comment"># 预留组，后续添加node节点使用</span>[new-node]<span class="hljs-comment">#10.102.54.xx NODE_ID=node6 NODE_IP="10.102.54.xx"</span><span class="hljs-comment">#10.102.54.xx NODE_ID=node7 NODE_IP="10.102.54.xx"</span>[all:vars]<span class="hljs-comment"># ---------集群主要参数---------------</span><span class="hljs-comment">#集群 MASTER IP, 需要负载均衡，一般为VIP地址</span>MASTER_IP=<span class="hljs-string">"10.102.54.222"</span>KUBE_APISERVER=<span class="hljs-string">"https://10.102.54.222:8443"</span><span class="hljs-comment">#TLS Bootstrapping 使用的 Token，使用 head -c 16 /dev/urandom | od -An -t x | tr -d ' ' 生成</span>BOOTSTRAP_TOKEN=<span class="hljs-string">"9de762eff153167c5c0169a58ea65208"</span><span class="hljs-comment"># 服务网段 (Service CIDR），部署前路由不可达，部署后集群内使用 IP:Port 可达</span>SERVICE_CIDR=<span class="hljs-string">"10.68.0.0/16"</span><span class="hljs-comment"># POD 网段 (Cluster CIDR），部署前路由不可达，**部署后**路由可达</span>CLUSTER_CIDR=<span class="hljs-string">"172.20.0.0/16"</span><span class="hljs-comment"># 服务端口范围 (NodePort Range)</span>NODE_PORT_RANGE=<span class="hljs-string">"2000-8000"</span><span class="hljs-comment"># kubernetes 服务 IP (预分配，一般是 SERVICE_CIDR 中第一个IP)</span>CLUSTER_KUBERNETES_SVC_IP=<span class="hljs-string">"10.68.0.1"</span><span class="hljs-comment"># 集群 DNS 服务 IP (从 SERVICE_CIDR 中预分配)</span>CLUSTER_DNS_SVC_IP=<span class="hljs-string">"10.68.0.2"</span><span class="hljs-comment"># 集群 DNS 域名</span>CLUSTER_DNS_DOMAIN=<span class="hljs-string">"cluster.local."</span><span class="hljs-comment"># etcd 集群间通信的IP和端口, **根据实际 etcd 集群成员设置**</span>ETCD_NODES=<span class="hljs-string">"etcd1=https://10.102.54.42:2380,etcd2=https://10.102.54.43:2380,etcd3=https://10.102.54.44:2380"</span><span class="hljs-comment"># etcd 集群服务地址列表, **根据实际 etcd 集群成员设置**</span>ETCD_ENDPOINTS=<span class="hljs-string">"https://10.102.54.42:2379,https://10.102.54.43:2379,https://10.102.54.44:2379"</span><span class="hljs-comment"># 集群basic auth 使用的用户名和密码</span>BASIC_AUTH_USER=<span class="hljs-string">"admin"</span>BASIC_AUTH_PASS=<span class="hljs-string">"infrak8s"</span><span class="hljs-comment"># ---------附加参数--------------------</span><span class="hljs-comment">#默认二进制文件目录</span>bin_dir=<span class="hljs-string">"/root/local/bin"</span><span class="hljs-comment">#证书目录</span>ca_dir=<span class="hljs-string">"/etc/kubernetes/ssl"</span><span class="hljs-comment">#部署目录，即 ansible 工作目录，建议不要修改</span>base_dir=<span class="hljs-string">"/etc/ansible"</span><span class="hljs-comment">#私有仓库 harbor服务器 (域名或者IP)</span><span class="hljs-comment">#需要把 harbor服务器证书复制到roles/harbor/files/harbor-ca.crt</span>HARBOR_SERVER=<span class="hljs-string">"harbor.com"</span></code></pre><ul><li><p>注意事项</p><ul><li><p>高可用<code>master</code>的虚拟<code>VIP</code><br>正常情况下安装<code>HAPROXY</code>后即可自动通过<code>ARP</code>协议生成虚拟<code>IP</code>并告知同网络其他机器，但是阿里云的网络不允许<code>ARP</code>，这样的话有2种解决方案：</p><ul><li>用阿里云<code>SLB</code>，后端挂载三台<code>master</code>即可，很简单，但这样只实现了负载均衡，并不能实现高可用，因为无法通过<code>SLB</code>的健康检查来踢掉挂掉的节点</li><li>使用阿里云高可用虚拟<code>IP</code>功能，但这个属于阿里云测试功能，需要找客服开通，且<strong>仅支持<code>VPC</code>网络</strong></li></ul></li><li><p>网络模型<br>这个方案采用的<code>calico</code>网络模型作为<code>POD</code>网络，它默认使用<code>bgp</code>协议，但是阿里云同样不支持这个，所以出现的现象就是暴露出来的<code>nodeport</code>只能通过<code>pod</code>所在的<code>node</code>访问，这样的话<code>k8s</code>niubility的地方就不存在了。所幸它还支持另一种<code>IPIP</code>模式，通过<code>IP</code>包方式进行通信，所以需要修改 <code>roles/calico/templates/calico-node.service.j2</code> 找到 <code>-e CALICO_IPV4POOL_IPIP=off \</code>这行，把<code>off</code> 改成 <code>always</code>.<br>保存后继续安装即可</p></li></ul></li></ul><h2 id="部署addons"><a href="#部署addons" class="headerlink" title="部署addons"></a>部署addons</h2><ul><li><p>安装kube-dns</p><pre><code class="hljs bash">kubectl create -f /etc/ansible/manifests/kubedns/kubedns.yaml</code></pre></li><li><p>安装kube-dashbord</p><pre><code class="hljs bash">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml</code></pre></li></ul><p>注意需要修改<code>svc kubernetest-dashbord</code>里的<code>type</code>为<code>nodeport</code>，这样可以从集群外进行访问<br><code>dashbord</code>的权限问题<br>采用了<code>token</code>认证的方式，首先建一个<code>admin role</code>，创建 <code>admin</code> 用户并赋予管理员权限<br><pre><code class="hljs bash">kubectl apply -f https://raw.githubusercontent.com/rootsongjc/kubernetes-handbook/master/manifests/dashboard-1.7.1/admin-role.yaml</code></pre></p><p>创建完成后获取 <code>secret</code> 和 <code>token</code> 的值<br><pre><code class="hljs bash">token=`kubectl -n kube-system get secret|grep admin-token | awk <span class="hljs-string">'&#123;print $1&#125;'</span>`    kubectl -n kube-system describe secret <span class="hljs-variable">$token</span></code></pre></p><p>获取到的<code>token</code>既可以用来登录<br>或者也可以用<code>kubeconfig</code>文件进行登录,位置是每台<code>node</code>机器上的<code>/root/.kube/config</code></p><ul><li><p>安装promethus和grafana</p><pre><code class="hljs bash">kubectl apply \--filename https://raw.githubusercontent.com/giantswarm/kubernetes-prometheus/master/manifests-all.yaml</code></pre><p>各种<code>dashbord</code>后续再说</p></li><li><p>日志入graylog<br><code>ubuntu16.04</code>下修改<code>/etc/docker/daemon.json</code>,添加</p></li></ul><pre><code class="hljs bash"><span class="hljs-string">"log-driver"</span>: <span class="hljs-string">"gelf"</span>,  <span class="hljs-string">"log-opts"</span>:  &#123;    <span class="hljs-string">"gelf-address"</span>: <span class="hljs-string">"udp://10.102.54.11:12202"</span>  &#125;,</code></pre><ul><li><p>支持私有docker-registery<br><code>ubuntu16.04</code>下修改<code>/etc/docker/daemon.json</code>,添加</p><pre><code class="hljs bash">  <span class="hljs-string">"insecure-registries"</span> : [<span class="hljs-string">"harbor.com"</span>],</code></pre><p><code>centos7.x</code>下</p><pre><code class="hljs bash">cp /lib/systemd/system/docker.service /etc/systemd/system/ &amp;&amp; sed -i <span class="hljs-string">'12s/$/ --insecure-registry=harbor.com/'</span> /etc/systemd/system/docker.service &amp;&amp; systemctl daemon-reload &amp;&amp; service docker restart</code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>docker go k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CAS5.x编译、部署(1)-LDAP支持</title>
    <link href="/2019/01/21/CAS-compile-plugin/"/>
    <url>/2019/01/21/CAS-compile-plugin/</url>
    
    <content type="html"><![CDATA[<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>测试环境: <code>ubuntu14.04</code><br><code>JDK</code>: <code>jdk1.8.0_121</code><br><code>tomacat</code>: <code>apache-tomcat-8.5.13</code>(<strong>cas5.x需要tomcat8.0以上</strong>)<br>安装依赖：<br><code>jdk</code>安装</p><pre><code class="hljs bash">mv jdk1.8.0_121 /usr/<span class="hljs-built_in">local</span>cat&lt;&lt; EOF &gt;&gt;/etc/profile<span class="hljs-built_in">export</span> JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/jdk1.8.0_121<span class="hljs-built_in">export</span> CLASSPATH=.:<span class="hljs-variable">$JAVA_HOME</span>/lib/dt.jar:<span class="hljs-variable">$JAVA_HOME</span>/lib/tools.jar<span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$PATH</span>EOF<span class="hljs-built_in">source</span> /etc/profile</code></pre><p><code>tomcat</code>安装<br><pre><code class="hljs bash">tar zxf apache-tomcat-8.5.13.tar.gzmv apache-tomcat-8.5.13 /usr/<span class="hljs-built_in">local</span>ln -s /usr/<span class="hljs-built_in">local</span>/apache-tomcat-8.5.13  /usr/<span class="hljs-built_in">local</span>/tomcat</code></pre></p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>注意，编译某个分支不要直接拉代码编，出问题的可能性很大<br><strong><code>CAS5.x</code>之后，只支持<code>gradle</code>编译方式</strong><br>可以使用官方提供的模板来进行编译<br><pre><code class="hljs bash">wget https://github.com/apereo/cas-gradle-overlay-template/archive/master.zipunzip master.zipcp -r cas-gradle-overlay-template-master /etc/cas<span class="hljs-built_in">cd</span> /etc/cas &amp;&amp; ./gradlew clean build</code></pre></p><p>如果要指定编译版本，修改<code>gradle.properties</code><br><pre><code class="hljs bash">cas.version=5.0.5</code></pre></p><p>如需添加插件进行编译，如<code>ldap</code>、<code>SAML</code>、<code>MFA</code>等等插件，修改<code>cas/build.gradle</code><br><pre><code class="hljs bash">dependencies &#123;    compile <span class="hljs-string">"org.apereo.cas:cas-server-webapp:<span class="hljs-variable">$&#123;project.'cas.version'&#125;</span>@war"</span>    compile <span class="hljs-string">"org.apereo.cas:cas-server-support-ldap:<span class="hljs-variable">$&#123;project.'cas.version'&#125;</span>"</span>    compile <span class="hljs-string">"org.apereo.cas:cas-server-support-saml-idp:<span class="hljs-variable">$&#123;project.'cas.version'&#125;</span>"</span>    compile <span class="hljs-string">"org.apereo.cas:cas-server-support-gauth:<span class="hljs-variable">$&#123;project.'cas.version'&#125;</span>"</span>&#125;</code></pre></p><p>编译好的<code>war</code>包，在<code>cas/build/libs</code>下</p><h2 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h2><p>将编译好的<code>war</code>包放到<code>/usr/local/tomcat/webapps/</code>下<br>然后启动<code>tomcat</code>：<br><pre><code class="hljs bash">/usr/<span class="hljs-built_in">local</span>/tomcat/bin/catalina.sh  start</code></pre></p><p>服务管理通过<code>/usr/local/tomcat/bin/catalina.sh</code>脚本<br><code>CAS</code>服务相关配置修改都在<code>/usr/local/tomcat/webapps/cas/WEB-INF/classes/application.properties</code><br><code>log</code>控制调整配置文件是<code>/usr/local/tomcat/webapps/cas/WEB-INF/classes/log4j2.xml</code></p><h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><p>需要保证编译时已添加各种插件<br>配置文件（<code>/usr/local/tomcat/webapps/cas/WEB-INF/classes/application.properties</code>）</p><h3 id="ldap配置"><a href="#ldap配置" class="headerlink" title="ldap配置"></a><code>ldap</code>配置</h3><pre><code class="hljs bash">cas.authn.accept.users= <span class="hljs-comment">#去掉默认的账号密码</span><span class="hljs-comment">#配置LDAP认证方式</span>cas.authn.attributeRepository.ldap.ldapUrl= <span class="hljs-comment">#修改ldap地址</span>cas.authn.attributeRepository.ldap.useSsl=<span class="hljs-literal">false</span>cas.authn.attributeRepository.ldap.useStartTls=<span class="hljs-literal">false</span>cas.authn.attributeRepository.ldap.connectTimeout=5000cas.authn.attributeRepository.ldap.baseDn= <span class="hljs-comment">#修改用户bashDn</span>cas.authn.attributeRepository.ldap.userFilter=user=&#123;user&#125; <span class="hljs-comment">#修改用户查询方式</span>cas.authn.attributeRepository.ldap.subtreeSearch=<span class="hljs-literal">true</span>cas.authn.attributeRepository.ldap.bindDn= <span class="hljs-comment">#填写bindDn</span>cas.authn.attributeRepository.ldap.bindCredential=******* <span class="hljs-comment">#填写密码</span>cas.authn.attributeRepository.ldap.trustCertificates=cas.authn.attributeRepository.ldap.keystore=cas.authn.attributeRepository.ldap.keystorePassword=cas.authn.attributeRepository.ldap.keystoreType=JKScas.authn.attributeRepository.ldap.minPoolSize=3cas.authn.attributeRepository.ldap.maxPoolSize=10cas.authn.attributeRepository.ldap.validateOnCheckout=<span class="hljs-literal">true</span>cas.authn.attributeRepository.ldap.validatePeriodically=<span class="hljs-literal">true</span>cas.authn.attributeRepository.ldap.validatePeriod=600cas.authn.attributeRepository.ldap.failFast=<span class="hljs-literal">true</span>cas.authn.attributeRepository.ldap.idleTime=500cas.authn.attributeRepository.ldap.prunePeriod=600cas.authn.attributeRepository.ldap.blockWaitTime=5000cas.authn.attributeRepository.attributes.samaccountname=samaccountname <span class="hljs-comment">#查询主键</span>cas.authn.attributeRepository.attributes.displayName=displayNamecas.authn.attributeRepository.attributes.cn=cn  <span class="hljs-comment">#配置ldap认证服务器</span><span class="hljs-comment">##</span><span class="hljs-comment"># LDAP</span><span class="hljs-comment">#</span><span class="hljs-comment"># Interesting part for Active Directory:</span>cas.authn.ldap[0].<span class="hljs-built_in">type</span>=AD <span class="hljs-comment">#ldap服务类型</span>cas.authn.ldap[0].ldapUrl= <span class="hljs-comment">#修改ldap地址</span>cas.authn.ldap[0].useSsl=<span class="hljs-literal">false</span>cas.authn.ldap[0].useStartTls=<span class="hljs-literal">false</span>cas.authn.ldap[0].connectTimeout=5000cas.authn.ldap[0].baseDn= <span class="hljs-comment">#修改用户bashDn</span>cas.authn.ldap[0].userFilter=user=&#123;user&#125; <span class="hljs-comment">#修改用户查询方式</span>cas.authn.ldap[0].subtreeSearch=<span class="hljs-literal">true</span>cas.authn.ldap[0].bindDn= <span class="hljs-comment">#配置账户</span>cas.authn.ldap[0].bindCredential=*********<span class="hljs-comment">#配置密码</span> cas.authn.ldap[0].dnFormat=cn=%s,OU=Users,OU=,DC=,dc=com <span class="hljs-comment">#配置查询语句</span>cas.authn.ldap[0].principalAttributeId=samaccountname <span class="hljs-comment">#配置属性查询</span>cas.authn.ldap[0].principalAttributePassword=cas.authn.ldap[0].principalAttributeList=samaccountname,sn,cn,givenName,displayName  <span class="hljs-comment">#配置返回属性</span>cas.authn.ldap[0].failFast=<span class="hljs-literal">false</span><span class="hljs-comment"># Default values:</span>cas.authn.ldap[0].minPoolSize=3cas.authn.ldap[0].maxPoolSize=10cas.authn.ldap[0].validateOnCheckout=<span class="hljs-literal">true</span>cas.authn.ldap[0].validatePeriodically=<span class="hljs-literal">true</span>cas.authn.ldap[0].validatePeriod=600cas.authn.ldap[0].idleTime=5000cas.authn.ldap[0].prunePeriod=5000cas.authn.ldap[0].blockWaitTime=5000</code></pre><h3 id="SAML配置"><a href="#SAML配置" class="headerlink" title="SAML配置"></a><code>SAML</code>配置</h3><pre><code class="hljs bash"><span class="hljs-comment">#saml</span>cas.samlCore.ticketidSaml2=<span class="hljs-literal">false</span>cas.samlCore.skewAllowance=0cas.samlCore.attributeNamespace=http://www.ja-sig.org/products/cas/cas.samlCore.issuer=cas.authn.samlIdp.entityId= <span class="hljs-comment">#配置地址</span>cas.authn.samlIdp.hostName= <span class="hljs-comment">#配置域名</span>cas.authn.samlIdp.scope= <span class="hljs-comment">#配置域</span>cas.authn.samlIdp.metadata.cacheExpirationMinutes=30cas.authn.samlIdp.metadata.failFast=<span class="hljs-literal">true</span>cas.authn.samlIdp.metadata.location=/etc/cas/saml <span class="hljs-comment">#配置 file:/etc/cas/saml</span>cas.authn.samlIdp.metadata.privateKeyAlgName=RSAcas.authn.samlIdp.metadata.requireValidMetadata=<span class="hljs-literal">true</span> cas.authn.samlIdp.metadata.basicAuthnUsername=cas.authn.samlIdp.metadata.basicAuthnPassword=cas.authn.samlIdp.metadata.supportedContentTypes=cas.authn.samlIdp.logout.forceSignedLogoutRequests=<span class="hljs-literal">true</span>cas.authn.samlIdp.logout.singleLogoutCallbacksDisabled=<span class="hljs-literal">false</span>cas.authn.samlIdp.response.skewAllowance=0cas.authn.samlIdp.response.signError=<span class="hljs-literal">false</span>cas.authn.samlIdp.response.overrideSignatureCanonicalizationAlgorithm=cas.authn.samlIdp.response.useAttributeFriendlyName=<span class="hljs-literal">true</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>IT CAS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT</tag>
      
      <tag>CAS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
